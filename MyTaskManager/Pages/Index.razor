@page "/"
@using System.Runtime.InteropServices
@using Microsoft.EntityFrameworkCore
@using MyTaskManager.Data
@using Models

<PageTitle>Index</PageTitle>

<h1>Task Manager</h1>

<div id="add-task">
    <label for="title">Title</label>
    <input type="text" id="title" @bind="_newTitle" />
    
    <br />
    <button class="btn btn-primary" @onclick="@(async() => await AddTask())">Add Task</button>
</div>

<div id="save-data">
    <button class="btn btn-primary" disabled="@_isDataSaved" @onclick="@(async() => await SaveData())">Save Data</button>
</div>

<div id="todo-list">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ToDoItem item in todos)
            {
                <tr>
                    <td>@item.Id</td>
                    <td><input type="text" @bind="@item.Title"></td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(async() => await UpdateTask(item))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(async() => await DeleteTask(item))">Delete</button>
                    </td>
                    
                </tr>
            }
        </tbody>
   </table>
</div>

@code
{
    private bool _isDataSaved = true;

    private List<ToDoItem> todos = new List<ToDoItem>();

    private string _newTitle = null!;

    [Inject]
    private IJSRuntime _js { get; set; }

    [Inject]
    private IDbContextFactory<TaskManagerContext> _dbContextFactory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Create("browser")))
        {
            // Create SQLite file in browser
            var module = await _js.InvokeAsync<IJSObjectReference>("import", "./SqliteBrowserConnector.js");
            await module.InvokeVoidAsync("synchronizeFileWithIndexedDb", "MyTaskManager.db");
        }

        using TaskManagerContext db = await _dbContextFactory.CreateDbContextAsync();
        await db.Database.EnsureCreatedAsync();

        if (!db.ToDos.Any())
        {
            await db.ToDos.AddRangeAsync(
                new ToDoItem { Title = "First Task" },
                new ToDoItem { Title = "Second Task" },
                new ToDoItem { Title = "Third Task" }
            );

            await db.SaveChangesAsync();
        }

        todos = await db.ToDos.ToListAsync();

        await base.OnInitializedAsync();
    }

    private async Task AddTask()
    {
        // Add to Database
        using TaskManagerContext db = await _dbContextFactory.CreateDbContextAsync();
        ToDoItem item = new ToDoItem { Title = _newTitle };
        await db.ToDos.AddAsync(item);
        await db.SaveChangesAsync();

        // Add to UI
        todos.Add(item);

        _isDataSaved = false;
    }

    private async Task DeleteTask(ToDoItem item)
    {
        using TaskManagerContext db = await _dbContextFactory.CreateDbContextAsync();

        // Remove from Database
        db.ToDos.Remove(item);
        await db.SaveChangesAsync();

        // Remove from UI
        todos.Remove(item);

        _isDataSaved = false;
    }

    private async Task UpdateTask(ToDoItem item)
    {
        using TaskManagerContext db = await _dbContextFactory.CreateDbContextAsync();
        db.ToDos.Update(item);
        await db.SaveChangesAsync();

        _isDataSaved = false;
    }

    private async Task SaveData()
    {
        var module = await _js.InvokeAsync<IJSObjectReference>("import", "./SqliteBrowserConnector.js");
        await module.InvokeVoidAsync("saveDatabaseToBrowser", "MyTaskManager.db");
        _isDataSaved = true;
    }
}
